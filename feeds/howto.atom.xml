<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Xeno:Lab - HowTo</title><link href="https://blog.xenolab.com/" rel="alternate"></link><link href="https://blog.xenolab.com/feeds/howto.atom.xml" rel="self"></link><id>https://blog.xenolab.com/</id><updated>2018-10-21T10:57:00-05:00</updated><entry><title>How I Started a PythonÂ Meetup</title><link href="https://blog.xenolab.com/how-i-started-a-python-meetup.html" rel="alternate"></link><published>2018-10-21T10:57:00-05:00</published><updated>2018-10-21T10:57:00-05:00</updated><author><name>ejo</name></author><id>tag:blog.xenolab.com,2018-10-21:/how-i-started-a-python-meetup.html</id><summary type="html">&lt;p&gt;Sometimes you just have to do things&amp;nbsp;yourself.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;&lt;strong&gt;Setting The&amp;nbsp;Scene&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I live just outside of Austin, Texas which is sometimes referred to as
&amp;#8220;Silicon Hills&amp;#8221;. There are many large computer and technology
companies here; &lt;span class="caps"&gt;IBM&lt;/span&gt;, &lt;span class="caps"&gt;AMD&lt;/span&gt;, Apple, Oracle, &lt;span class="caps"&gt;NVIDA&lt;/span&gt; to name just a
handful. Just as importantly, there is a teeming ecology of smaller
tech companies which provide goods and services across the entire
gamut of the technology space. Austin is awash in nerds and geeks of
every&amp;nbsp;stripe.&lt;/p&gt;
&lt;p&gt;Given all these talented people doing cool stuff, there are naturally
&lt;a href="https://meetup.com"&gt;meetups&lt;/a&gt; all over the greater Austin area where people get
together, network and share their knowledge. I really wanted to attend
the &lt;a href="https://meetup.com/austinpython"&gt;Austin Python&lt;/a&gt; meetup but their schedule and location wasn&amp;#8217;t a
good fit for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;I was feeling sorry for myself, discussing the situation with a friend
on the excellent &lt;a href="https://pybites.slack.com"&gt;PyBites Slack&lt;/a&gt; and he told me he&amp;#8217;d just started a
Python meetup. And he&amp;#8217;d already had a meeting. I was &lt;a href="https://en.oxforddictionaries.com/definition/us/gobsmacked"&gt;gobsmacked&lt;/a&gt;
and more than a little jealous of his initiative! I was motivated right
there to stop waiting for the right meetup for me and make it&amp;nbsp;happen.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;What Have I&amp;nbsp;Done?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;It doesn&amp;#8217;t take much to create a new organization on meetup.com. You
are prompted for the&amp;nbsp;following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A regional&amp;nbsp;location&lt;/li&gt;
&lt;li&gt;An organization&amp;nbsp;name&lt;/li&gt;
&lt;li&gt;Who the group is&amp;nbsp;for.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then they will ask you for money. To be honest, I did this late at
night and the details on the cost are fuzzy. I signed up for a six
month &amp;#8220;subscription&amp;#8221; and pushed the &amp;#8216;Pay&amp;#8217; button. And then I thought
to myself &amp;#8220;Well great, now&amp;nbsp;what?&amp;#8221;.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;If You Build It, Will They&amp;nbsp;Come? &lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The next morning, I sat down and started digging into the tools
provided by Meetup for groups. I hacked together a logo with the help
of my exeedingly talented and patient wife and started branding the
group meetup pages. I wrote some verbiage describing the kind of group
I wanted to build and wrote some introductory text about&amp;nbsp;myself.&lt;/p&gt;
&lt;p&gt;When all was said and done, I spent maybe two hours on the graphic
design and copy writing. The group page looked a little less generic
and the text was ernest and&amp;nbsp;forthcoming. &lt;/p&gt;
&lt;p&gt;I spent some time discussing my efforts on Slack and received lots of
positive reinforcement. Then I got my first notification from Meetup
that someone had joined the Meetup! Wow talk about a rush! I wasn&amp;#8217;t
entirely&amp;nbsp;alone!&lt;/p&gt;
&lt;p&gt;That weekend, the membership for the group increased steadily and I
soon found myself with over 50 people interested in the group I
proposed. Quick side note, once you get over 50 people in your group
Meetup will want to increase the fee they charge. I blindly paid the
fee, caught up in the excitement of creating a new&amp;nbsp;community.&lt;/p&gt;
&lt;p&gt;Ok, now it was time to get them to show up to a&amp;nbsp;meeting.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The First&amp;nbsp;Meeting&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Meetups are notorius for creating a buzz around a topic, having a lot
of people join up and then generating minimal attendence. I&amp;#8217;m guilty
of this myself. It&amp;#8217;s pretty easy to click a button and say &amp;#8220;Yeah, I&amp;#8217;m
kinda interested in that&amp;#8221;. Re-iterating my introverted tendencies,
it&amp;#8217;s hard for me to work against personal inertia and show up to a
meeting. And the little voice that whispers &lt;em&gt;&amp;#8220;they won&amp;#8217;t like your&amp;#8221;&lt;/em&gt; or
&lt;em&gt;&amp;#8220;you&amp;#8217;re not a real programmer&amp;#8221;&lt;/em&gt; or &lt;em&gt;&amp;#8220;your socks aren&amp;#8217;t alphabetized
yet&amp;#8221;&lt;/em&gt;. Two of those three thoughts really ocurred to&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Having experienced this phenomenon myself, I wanted our first meeting
to be more of a social setting than a technical one. So I picked my
favorite upscale bar for the following&amp;nbsp;reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convenient to me&amp;nbsp;geographically.&lt;/li&gt;
&lt;li&gt;I was comfortable&amp;nbsp;there.&lt;/li&gt;
&lt;li&gt;Lots of room and table space for people to&amp;nbsp;talk.&lt;/li&gt;
&lt;li&gt;Not crowded in the early afternoon on a&amp;nbsp;weekend.&lt;/li&gt;
&lt;li&gt;Beer is a social&amp;nbsp;lubricant.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I recognize that not everybody would be interested in adult beverages,
but I am far more social after a pint of beer. Being in a comfortable
setting let me be welcoming and open. It&amp;#8217;s super tough to show up out
of the blue and meet strangers, so my goal was to greet everyone with
a smile and a name&amp;nbsp;tag.&lt;/p&gt;
&lt;p&gt;I crafted a meeting notice on Meetup and sent it out to the&amp;nbsp;membership.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Preparation &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Anticipation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m not going to lie. I was more than a little apprehensive about
hosting a meeting. My very good reasons to be apprehensive&amp;nbsp;included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No experience in running a&amp;nbsp;group&lt;/li&gt;
&lt;li&gt;No experience hosting a&amp;nbsp;meeting&lt;/li&gt;
&lt;li&gt;No experience running a&amp;nbsp;meeting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I spun my wheels grappling with my &lt;a href="https://en.wikipedia.org/wiki/Impostor_syndrome"&gt;imposter syndrome&lt;/a&gt;, RSVPs
started to come in. Actual people&amp;#8217;s actual names now associated with
the nebulous idea of a &amp;#8220;python user group&amp;#8221;. I needed to seriously
put my act together and make something&amp;nbsp;happen.&lt;/p&gt;
&lt;p&gt;While I might not have experience at running a group, I definitely
have been involved with different groups and I had ideas about the
things that worked and didn&amp;#8217;t work for all of them. I haven&amp;#8217;t hosted a
meeting, but I&amp;#8217;ve attended plenty. I haven&amp;#8217;t run a meeting, but I&amp;#8217;ve
been to good, bad and horrible ones. Working from past experience, I
started preparing for the two hour&amp;nbsp;meeting.&lt;/p&gt;
&lt;p&gt;First, I knew I wanted those cheesy &amp;#8220;Hello My Name Is:&amp;#8221; stickers. I am
terrible with names and I wanted to address any stressors in a new social
situation. Knowing someone&amp;#8217;s name is a great way to build rapport and
the nametags smooth over those awkward seconds when you forget the name
of the person you just met. It feels like the kernel of community to&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Second, I wanted a clipboard because every &amp;#8220;serious&amp;#8221; organization has
one (totally kidding, I just like clipbards).  I found a cheap
clipboard with integrated storage at the office supply store while
looking for the nametags and sharpies and lamination materials. At
home I printed out a 8.5x11&amp;#8221; group logo, laminated it and taped it to
the front of the clipboard. Now I had a sign to set out on a table and
a &amp;#8220;base of operations&amp;#8221;. I also tucked in a couple dozen sheets of blank
paper and&amp;nbsp;pens.&lt;/p&gt;
&lt;p&gt;Last, every fun computer group has a sticker for their laptop. At
least as far as I know. I made a 2x3 inch design from my initial logo
work and ordered a roll of 100 stickers from &lt;a href="https://stickermule.com"&gt;stickermule.com&lt;/a&gt;. 
Huge shout out to StickerMule for getting the stickers to me in
time for the&amp;nbsp;event!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sticker" src="https://blog.xenolab.com/images/nap_sticker.png"&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The First&amp;nbsp;Meeting&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;So you should probably contact your venue before scheduling your
meetup. And you&amp;#8217;ve probably already guessed that advice like that is
hard won. I showed up thirty minutes early for the meetup, ordered a
beer and talked to the staff. Bringing in sixteen customers on a slow
afternoon will make any bar happy, but I had no plan B if they
would&amp;#8217;ve declined to host us. Lesson learned, call&amp;nbsp;ahead.&lt;/p&gt;
&lt;p&gt;I sat down and filled out my name tag. I wanted to give people some
ice breakers, so I wrote my name, my favorite operating system, my
favorite editor and an interesting python&amp;nbsp;module.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Your Host" src="https://blog.xenolab.com/images/hello_my_name_is.png"&gt;&lt;/p&gt;
&lt;p&gt;As folks began to filter in, I invited them to fill out a name tag and
introduced them around. Pretty soon, I had over a dozen people talking
to each other about python, the computing industry and just hanging
out. It was totally&amp;nbsp;working!&lt;/p&gt;
&lt;p&gt;My only goal for the meeting, beyond quaffing a beer or two, was to
get some feedback on two things. First I wanted more ideas for places
the group could meet. The bar is fine for a casual conversation,
however everyone agreed it was too loud for a techincal
discussion. And second, I wanted to find out what python topics people
were interested in learning&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;Rather than interrupt the social flow with me pontificating, I bashed
together two sheets; one labeled &amp;#8220;Venue Ideas&amp;#8221; and the other &amp;#8220;10
Minute Python Talk Topics&amp;#8221;. Those circulated through the group and at
the end I didn&amp;#8217;t have much in the way of venues (that&amp;#8217;s a hard
problem). But I did get a list of over a dozen python related topics
that people were interested in learning about. That was huge. It gave
me a guage of where people were at skill/experience wise and a roadmap
for future&amp;nbsp;meetings.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;And Then It Was&amp;nbsp;Over&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The meeting lasted roughly two and half hours; thirty minutes longer
than scheduled. I paid my tab and walked out with the last couple of
people to leave. Everyone left with a sticker or two for their laptop
and assurances that the next meeting would be somewhere quieter and
have some actual python content. I was ridiculously happy with the
meeting; people showed up, people talked and I got some feedback
about the group and what other people were looking&amp;nbsp;for.&lt;/p&gt;
&lt;p&gt;Honestly, I am humbled and thrilled at the turn out for the first
meeting. More than 90% of people who &lt;span class="caps"&gt;RSVP&lt;/span&gt;&amp;#8217;ed attended and the
anonymous event feedback was gratifyingly&amp;nbsp;positive.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Feedback Brag" src="https://blog.xenolab.com/images/anonymous_feedback.png"&gt;&lt;/p&gt;
&lt;p&gt;I talked to a
bunch of genuine people who shared a common interest and I am
really looking forward to seeing what comes&amp;nbsp;next.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Next&amp;nbsp;Steps&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Our next meeting is tenatively scheduled for mid-November and I&amp;#8217;ve
announced a simple agenda; I&amp;#8217;ll deliver a short 20-30 minute talk
called &amp;#8220;Python Crash Course&amp;#8221; followed by 90 minutes of discussion and
hacking. I&amp;#8217;m already working on the materials for the talk. With
any luck, I&amp;#8217;ll have a quiet room that can accomodate 60&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;If you can&amp;#8217;t find a community that suits your schedule or needs,
consider building one from scratch. In my sample size of
two (&lt;a href="https://meetup.com/pyandbeer"&gt;1&lt;/a&gt;,&lt;a href="https://meetup.com/north-austin-pythonistas"&gt;2&lt;/a&gt;), there are people in the same position that are just
waiting for you to step up and do&amp;nbsp;it.&lt;/p&gt;</content><category term="howto meetup"></category></entry><entry><title>How To Write a C Program LikeÂ Me</title><link href="https://blog.xenolab.com/how-to-write-a-c-program-like-me.html" rel="alternate"></link><published>2018-10-06T00:00:00-05:00</published><updated>2018-10-06T00:00:00-05:00</updated><author><name>ejo</name></author><id>tag:blog.xenolab.com,2018-10-06:/how-to-write-a-c-program-like-me.html</id><summary type="html">&lt;p&gt;Learn how to write a good C main&amp;nbsp;function.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;&lt;strong&gt;C is&amp;nbsp;Dumb&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;I know, Python and Javascript are what the kids are writing all their
crazy &amp;#8216;apps&amp;#8217; with these days. But don&amp;#8217;t be so quick to dismiss C, it&amp;#8217;s
a capable and concise language that has a lot to offer. If you need
speed, writing in C could be your answer. If you are looking for job
security and the opportunity to learn how to hunt down null pointer
dereferences, C could also be your answer! In this article, I&amp;#8217;ll
explain how to structure a C file and write a C main function that
handles command-line arguments like a&amp;nbsp;champ.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: a crusty &lt;span class="caps"&gt;UNIX&lt;/span&gt; system programmer.&lt;br&gt;
&lt;strong&gt;You&lt;/strong&gt;: someone with an editor, a C compiler and some time to&amp;nbsp;kill.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Let&amp;#8217;s do&amp;nbsp;this.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;A Boring But Correct C&amp;nbsp;Program&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A C program starts with a &lt;code&gt;main()&lt;/code&gt; function, usually kept in a file named &lt;code&gt;main.c&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* main.c */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This program &lt;strong&gt;compiles&lt;/strong&gt; but doesn&amp;#8217;t &lt;strong&gt;do&lt;/strong&gt;&amp;nbsp;anything:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gcc main.c
$ ./a.out -o foo -vv 
$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Correct and&amp;nbsp;boring.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Main Functions Are&amp;nbsp;Unique&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;main()&lt;/code&gt; function is the first function in your program executed
when it begins executing, but it&amp;#8217;s not the first function
executed. The &lt;em&gt;first&lt;/em&gt; function is &lt;code&gt;_start()&lt;/code&gt; which is typically
provided by the C runtime library, linked in automatically when your
program is compiled. The details are highly dependent on the operating
system and compiler toolchain, so I&amp;#8217;m going to pretend like I didn&amp;#8217;t
mention&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;main()&lt;/code&gt; function has two arguments that traditionally are called
&lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt; and returns a signed integer. Most &lt;span class="caps"&gt;UNIX&lt;/span&gt; environments
expect programs to return zero on success and negative one on&amp;nbsp;failure.&lt;/p&gt;
&lt;table&gt;
 &lt;tr&gt;&lt;th&gt;Argument&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;argc&lt;/td&gt;&lt;td&gt;Argument Count &lt;/td&gt;&lt;td&gt;Length of the argument vector.&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;argv&lt;/td&gt;&lt;td&gt;Argument Vector&lt;/td&gt;&lt;td&gt;Array of character pointers.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The argument vector, &lt;code&gt;argv&lt;/code&gt;, is a tokenized representation of the
commmand line that invoked your program. In the example above, &lt;code&gt;argv&lt;/code&gt;
would be a list of the following&amp;nbsp;strings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/path/to/a.out&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-vv&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The argument vector is guaranteed to always have at least one string in the
first index, &lt;code&gt;argv[0]&lt;/code&gt; which is the full path to the program&amp;nbsp;executed. &lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Anatomy of a &lt;code&gt;main.c&lt;/code&gt; File&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;When I write a &lt;code&gt;main.c&lt;/code&gt; from scratch, it&amp;#8217;s usually structured like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* main.c */&lt;/span&gt;
&lt;span class="cm"&gt;/* 0 copyright/licensing */&lt;/span&gt;
&lt;span class="cm"&gt;/* 1 includes */&lt;/span&gt;
&lt;span class="cm"&gt;/* 2 defines */&lt;/span&gt;
&lt;span class="cm"&gt;/* 3 external declarations */&lt;/span&gt;
&lt;span class="cm"&gt;/* 4 typedefs */&lt;/span&gt;
&lt;span class="cm"&gt;/* 5 global variable declarations */&lt;/span&gt;
&lt;span class="cm"&gt;/* 6 function prototypes */&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/* 7 command-line parsing */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* 8 function declarations */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;#8217;ll talk about each of these numbered sections, except for zero. If you
have to put copyright or licensing text in your source, put it&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;Another thing I won&amp;#8217;t talk about adding to your program is&amp;nbsp;comments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &amp;quot;Comments lie.&amp;quot;
 - A cynical but smart and good looking programmer.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instead of comments, use meaningful function and variable&amp;nbsp;names.&lt;/p&gt;
&lt;p&gt;Appealing to the innate laziness of programmers, once you add comments
you&amp;#8217;ve doubled your maintenance load. If you change or refactor the
code, you need to update or expand the comments. Over time the code
mutates away from anything resembling what the comments&amp;nbsp;describe.&lt;/p&gt;
&lt;p&gt;If you have to write comments, do not write about &lt;em&gt;what&lt;/em&gt; the code is
doing.  Instead, write about &lt;em&gt;why&lt;/em&gt; the code is doing what it&amp;#8217;s doing.
Write comments that you would want to read five years from now when
you&amp;#8217;ve forgotten everything about this code. And the fate of the
world is depending on you. &lt;em&gt;No pressure&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1&amp;nbsp;Includes&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The first things I add to a &lt;code&gt;main.c&lt;/code&gt; file are includes to make a
multitude of standard C library functions and variables available to
my program. The standard C library does lots of things, explore header
files in &lt;code&gt;/usr/include&lt;/code&gt; to find out what it can do for&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;#include&lt;/code&gt; string is a &lt;a href="https://en.wikipedia.org/wiki/C_preprocessor"&gt;C preprocessor&lt;/a&gt; directive that causes
the inclusion of the referenced file in it&amp;#8217;s entirety into the current
file. Header files in C are usually named with a &lt;code&gt;.h&lt;/code&gt; extension and
should not contain any executable code; only macros, defines, typedefs
and external variable and function prototypes. The string &lt;code&gt;&amp;lt;header.h&amp;gt;&lt;/code&gt;
tells &lt;em&gt;cpp&lt;/em&gt; to look for a file called &lt;code&gt;header.h&lt;/code&gt; in the system defined
header path, usually &lt;code&gt;/usr/include&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* main.c */&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;libgen.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;getopt.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the minimum set of global includes that I&amp;#8217;ll include by default for the following&amp;nbsp;stuff.&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;#include File&lt;/th&gt;&lt;th&gt;Stuff It Provides&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;stdio  &lt;/td&gt;&lt;td&gt; Supplies &lt;span class="caps"&gt;FILE&lt;/span&gt;, stdin, stdout, stderr and the fprint() family of functions&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;stdlib &lt;/td&gt;&lt;td&gt; Supplies malloc(), calloc() and realloc() &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;unistd &lt;/td&gt;&lt;td&gt; Supplies EXIT_FAILURE, EXIT_SUCCESS &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;libgen &lt;/td&gt;&lt;td&gt; Supplies the basename() function. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;errno  &lt;/td&gt;&lt;td&gt; Defines the external errno variable and all the values it can take on. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;string &lt;/td&gt;&lt;td&gt; Supplies memcpy(), memset() and the strlen() family of functions. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;getopt &lt;/td&gt;&lt;td&gt; Supplies external optarg, opterr, optind and getopt() function. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;sys/types&lt;/td&gt;&lt;td&gt;
Typedef shortcuts like uint32_t and uint64_t &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;&lt;strong&gt;2&amp;nbsp;Defines&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* main.c */&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define OPTSTR &amp;quot;vi:o:f:h&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define USAGE_FMT  &amp;quot;%s [-v] [-f hexflag] [-i inputfile] [-o outputfile] [-h]&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define ERR_FOPEN_INPUT  &amp;quot;fopen(input, r)&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define ERR_FOPEN_OUTPUT &amp;quot;fopen(output, w)&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define ERR_DO_THE_NEEDFUL &amp;quot;do_the_needful blew up&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define DEFAULT_PROGNAME &amp;quot;george&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This doesn&amp;#8217;t make a lot of sense right now, but the &lt;code&gt;OPTSTR&lt;/code&gt; define is
where we will define what command-line switches the program will
recommend. Consult the &lt;a href="https://linux.die.net/man/3/getopt"&gt;&lt;code&gt;getopt(3)&lt;/code&gt;&lt;/a&gt; manual page to learn how &lt;span class="caps"&gt;OPTSTR&lt;/span&gt;
will affect &lt;code&gt;getopt()&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s&amp;nbsp;behavior.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;USAGE_FMT&lt;/code&gt; define is a &lt;code&gt;printf()&lt;/code&gt;-style format string that is
referenced in the &lt;code&gt;usage()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;I also like to gather string constants as &lt;code&gt;#define&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s in this part of
the file. Collecting them makes it easier to fix spelling, reuse
messages and internationalize messages if&amp;nbsp;required.&lt;/p&gt;
&lt;p&gt;Finally, give &lt;code&gt;#define&lt;/code&gt;s names with all capital letters to distinguish them
from variable and function names. You can run the words together if you want or
separate words with an underscore, just make sure it&amp;#8217;s all upper&amp;nbsp;case.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3 External&amp;nbsp;Declarations&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* main.c */&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;opterr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;optind&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;An &lt;code&gt;extern&lt;/code&gt; declaration brings that name into the namespace of the
current compilation unit ( a.k.a &amp;#8220;file&amp;#8221; ) and allows the program to
access that variable.  Here we&amp;#8217;ve brought in the definitions for three
integer variables and a character pointer.  The &lt;code&gt;opt&lt;/code&gt; prefaced
variables are used by the &lt;code&gt;getopt()&lt;/code&gt; function and &lt;code&gt;errno&lt;/code&gt; is used as
an out-of-band communication channel by the standard C library to
communicate why a function might have&amp;nbsp;failed.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;4&amp;nbsp;Typedefs&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* main.c */&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt;           &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;uint32_t&lt;/span&gt;      &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;FILE&lt;/span&gt;         &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;FILE&lt;/span&gt;         &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;options_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After external declarations, I like to declare &lt;code&gt;typedefs&lt;/code&gt; for
structures, unions and enumerations. Naming &lt;code&gt;typedefs&lt;/code&gt; is a religion
all to itself; I strongly prefer a &amp;#8216;_t&amp;#8217; suffix to indicate that the
name is a type. In this example, I&amp;#8217;ve declared &lt;code&gt;options_t&lt;/code&gt; as a
&lt;code&gt;struct&lt;/code&gt; with four members. &lt;code&gt;C&lt;/code&gt; is a white-space neutral programming
language, so I use white space to line up field names in the same
column.  I just like the way it looks. For the pointer declarations, I
prepend the asterisk to the name to make it clear that it&amp;#8217;s a&amp;nbsp;pointer.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;5 Global Variable&amp;nbsp;Declarations&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;`c
/&lt;em&gt; main.c &lt;/em&gt;/&amp;nbsp;&amp;lt;&amp;#8230;&amp;gt;&lt;/p&gt;
&lt;p&gt;int dumb_global_variable =&amp;nbsp;-11;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Global variables are a bad idea and you should never use them. But if
you have to use a global variable, declare them here and be sure to
give them a default value. Seriously, _don&amp;#39;t use global variables_.

### **6 Function Prototypes**

```c
/* main.c */
&amp;lt;...&amp;gt;

void usage(char *progname, int opt);
int  do_the_needful(options_t *options);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you write functions, added after the &lt;code&gt;main()&lt;/code&gt; function and not
before, include the function prototypes here. Early C compilers used a
single-pass strategy which meant that every symbol (variable or
function name) you used in your program had to be declared before you
used it. Modern compilers are nearly all multi-pass compilers that
build a complete symbol table before generating code, so the use of
function prototypes is not strictly required. However you sometimes
don&amp;#8217;t get to choose what compiler is used on your code, so write the
function prototypes and drive&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;As a matter of course, I always include a &lt;code&gt;usage()&lt;/code&gt; function that
&lt;code&gt;main()&lt;/code&gt; calls when it doesn&amp;#8217;t understand something you passed in from
the&amp;nbsp;command-line.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;7 Command-Line&amp;nbsp;Parsing&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* main.c */&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;options_t&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;opterr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTSTR&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
       &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
                 &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERR_FOPEN_INPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="cm"&gt;/* NOTREACHED */&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
                 &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERR_FOPEN_OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="cm"&gt;/* NOTREACHED */&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;    
              &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
              &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;strtoul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
              &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
           &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
              &lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="cm"&gt;/* NOTREACHED */&lt;/span&gt;
              &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_the_needful&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERR_DO_THE_NEEDFUL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="cm"&gt;/* NOTREACHED */&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, that&amp;#8217;s a lot. The purpose of the &lt;code&gt;main()&lt;/code&gt; function is to collect the
arguments that the user provides, perform minimal input validation and
then pass the collected arguments to functions that will use them.  In
this example, we declare an &lt;code&gt;options&lt;/code&gt; variable initialized with
default values and parse the command-line, updating &lt;code&gt;options&lt;/code&gt; as&amp;nbsp;necessary.&lt;/p&gt;
&lt;p&gt;The guts of this &lt;code&gt;main()&lt;/code&gt; function is a while loop that uses &lt;code&gt;getopt()&lt;/code&gt; to
step thru &lt;code&gt;argv&lt;/code&gt; looking for command-line options and their arguments
(if any). The &lt;span class="caps"&gt;OPTSTR&lt;/span&gt; &lt;code&gt;#define&lt;/code&gt; earlier in the file is the template
that drives &lt;code&gt;getopt()&lt;/code&gt;s behavior.  The &lt;code&gt;opt&lt;/code&gt; variable takes on the
character value of any command-line options found by &lt;code&gt;getopt()&lt;/code&gt; and the
program&amp;#8217;s response to the detection of the command-line option happens
in the &lt;code&gt;switch&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;Those of you paying attention will now be questioning why &lt;code&gt;opt&lt;/code&gt; is
declared as an 32-bit &lt;code&gt;int&lt;/code&gt; but is expected to take on an 8-bit
&lt;code&gt;char&lt;/code&gt;?  It turns out &lt;code&gt;getopt()&lt;/code&gt; returns an &lt;code&gt;int&lt;/code&gt; value that takes on a
negative one when it gets the end of &lt;code&gt;argv&lt;/code&gt;, which I check against
&lt;code&gt;EOF&lt;/code&gt; or &amp;#8220;End of File&amp;#8221; marker. A &lt;code&gt;char&lt;/code&gt; is a signed quantity, but I
like matching variables to their function return&amp;nbsp;values.&lt;/p&gt;
&lt;p&gt;When a known command-line option is detected, option specific behavior
happens.  Some options have an argument, specified in &lt;span class="caps"&gt;OPTSTR&lt;/span&gt; with a
trailing colon. When an option has a argument, the next string in argv
is available to the program via the externally defined variable
&lt;code&gt;optarg&lt;/code&gt;. We use &lt;code&gt;optarg&lt;/code&gt; to open files for reading and writing or
converting a command-line argument from a string to an integer&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;There are a couple of points for style&amp;nbsp;here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialize &lt;code&gt;opterr&lt;/code&gt; to zero which disables &lt;code&gt;getopt&lt;/code&gt; from emiting a&amp;nbsp;&amp;#8216;?&amp;#8217;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exit(EXIT_FAILURE);&lt;/code&gt; or &lt;code&gt;exit(EXIT_SUCCESS);&lt;/code&gt; in the middle of &lt;code&gt;main()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/* NOTREACHED */&lt;/code&gt; is a lint directive that I&amp;nbsp;like.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return EXIT_SUCCESS;&lt;/code&gt; at the end of functions that return &lt;code&gt;int&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Explicitly cast implicit type&amp;nbsp;conversions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The command-line signature for this program if it were compiled would
look something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./a.out -h
a.out &lt;span class="o"&gt;[&lt;/span&gt;-v&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-f hexflag&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-i inputfile&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-o outputfile&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-h&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact, that&amp;#8217;s what &lt;code&gt;usage()&lt;/code&gt; will emit to &lt;code&gt;stderr&lt;/code&gt; once&amp;nbsp;compiled.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;8 Function&amp;nbsp;Declarations&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* main.c */&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;progname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;USAGE_FMT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;progname&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nl"&gt;progname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_PROGNAME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="cm"&gt;/* NOTREACHED */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;do_the_needful&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EINVAL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ENOENT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="cm"&gt;/* XXX do needful stuff */&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now, finally, we write functions that aren&amp;#8217;t boilerplate. In this
example, function &lt;code&gt;do_the_needful()&lt;/code&gt; accepts a pointer to an
&lt;code&gt;options_t&lt;/code&gt; structure. We validate that the &lt;code&gt;options&lt;/code&gt; pointer is not
&lt;span class="caps"&gt;NULL&lt;/span&gt; and then go on to validate the &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; structure
members.  We return EXIT_FAILURE if either test fails, and signal to
the caller a general reason by setting the external global variable
&lt;code&gt;errno&lt;/code&gt; to a conventional error code. The convenience function
&lt;code&gt;perror()&lt;/code&gt; can be used by the caller to emit human-readable-ish error
messages based on the value of &lt;code&gt;errno&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Functions should almost always validate their input in some way. If
full validation is expensive, try to do it once and treat the
validated data as immutable. In the &lt;code&gt;usage()&lt;/code&gt; function, we validate
the &lt;code&gt;progname&lt;/code&gt; argument using a conditional assignment in the
&lt;code&gt;fprintf()&lt;/code&gt; call. The &lt;code&gt;usage()&lt;/code&gt; function is going to exit anyway, so I
don&amp;#8217;t bother setting &lt;code&gt;errno&lt;/code&gt; or making a big stink about using a
correct program&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;The big class of errors we are trying to avoid here is dereferencing a
&lt;span class="caps"&gt;NULL&lt;/span&gt; pointer. This will cause the operating system to send a special
signal to our process called &lt;code&gt;SYSSEGV&lt;/code&gt; which results in unavoidable
death. The last thing your users want to see is a crash due to
&lt;span class="caps"&gt;SYSSEGV&lt;/span&gt;. It&amp;#8217;s much better to catch a &lt;span class="caps"&gt;NULL&lt;/span&gt; pointer so you can emit
better error messages and shutdown the program&amp;nbsp;gracefully.&lt;/p&gt;
&lt;p&gt;Some people complain about having multiple &lt;code&gt;return&lt;/code&gt; statements in a
function body. They make arguments about continuity of control-flow
and other stuff. Honestly, if the something goes wrong in the middle
of a function, it&amp;#8217;s a good time to return an error condition. Writing
a ton of nested &lt;code&gt;if&lt;/code&gt; statements just have one return is never a &amp;#8220;good&amp;nbsp;idea&amp;#8221;â¢.&lt;/p&gt;
&lt;p&gt;Finally, if you write a function that takes four or more arguments
consider bundling those arguments in a structure and passing a pointer
to the structure. This makes the function signatures simpler, making
them easier to remember and not screw up when you call them later. It
also makes calling the function slightly faster since fewer things
need to be copied into the function&amp;#8217;s stack frame. In practice, this
will only become a consideration if the function is called millions or
billions of times. Don&amp;#8217;t worry about it if that doesn&amp;#8217;t make&amp;nbsp;sense.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Wait, You Said No&amp;nbsp;Comments!?!!&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;In the &lt;code&gt;do_the_needful()&lt;/code&gt; function I wrote a specific type of comment
that is designed to be a placeholder rather than document the&amp;nbsp;code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* XXX do needful stuff */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you are in the zone, sometimes you don&amp;#8217;t want to stop and write
some particularly gnarly bit of code. You&amp;#8217;ll come back and do it
later, just not now. That&amp;#8217;s where I&amp;#8217;ll leave myself a little
breadcrumb.  I insert a commment with a &amp;#8216;&lt;span class="caps"&gt;XXX&lt;/span&gt;&amp;#8217; prefix and a short
remark describing what needs doing. Later on when I have more time,
I&amp;#8217;ll grep thru source looking for &lt;span class="caps"&gt;XXX&lt;/span&gt;. It doesn&amp;#8217;t matter what you
use, just make sure it&amp;#8217;s not likely to show up in your code base
in another context; function name or variable for&amp;nbsp;instance.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Putting It All&amp;nbsp;Together&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Ok, this progam &lt;em&gt;still&lt;/em&gt; does almost nothing when you compile and run
it. But now you have a solid skeleton to build your own command-line
parsing &lt;code&gt;C&lt;/code&gt; programs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* main.c - the complete listing */&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;libgen.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;getopt.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define OPTSTR &amp;quot;vi:o:f:h&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define USAGE_FMT  &amp;quot;%s [-v] [-f hexflag] [-i inputfile] [-o outputfile] [-h]&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define ERR_FOPEN_INPUT  &amp;quot;fopen(input, r)&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define ERR_FOPEN_OUTPUT &amp;quot;fopen(output, w)&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define ERR_DO_THE_NEEDFUL &amp;quot;do_the_needful blew up&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define DEFAULT_PROGNAME &amp;quot;george&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;opterr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;optind&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt;           &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;uint32_t&lt;/span&gt;      &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;FILE&lt;/span&gt;         &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;FILE&lt;/span&gt;         &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;options_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dumb_global_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;progname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;  &lt;span class="nf"&gt;do_the_needful&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;options_t&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;opterr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTSTR&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
       &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
                 &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERR_FOPEN_INPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="cm"&gt;/* NOTREACHED */&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
                 &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERR_FOPEN_OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="cm"&gt;/* NOTREACHED */&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;    
              &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
              &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;strtoul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
              &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
           &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
              &lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="cm"&gt;/* NOTREACHED */&lt;/span&gt;
              &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_the_needful&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERR_DO_THE_NEEDFUL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="cm"&gt;/* NOTREACHED */&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;progname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;USAGE_FMT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;progname&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nl"&gt;progname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_PROGNAME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="cm"&gt;/* NOTREACHED */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;do_the_needful&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EINVAL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ENOENT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="cm"&gt;/* XXX do needful stuff */&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="C"></category><category term="programming"></category><category term="style"></category></entry><entry><title>Using Pelican to Publish Your Blog onÂ GitHub</title><link href="https://blog.xenolab.com/using-pelican-to-publish-your-blog-on-github.html" rel="alternate"></link><published>2018-10-05T00:00:00-05:00</published><updated>2018-10-05T00:00:00-05:00</updated><author><name>ejo</name></author><id>tag:blog.xenolab.com,2018-10-05:/using-pelican-to-publish-your-blog-on-github.html</id><summary type="html">&lt;p&gt;How to use pelican to publish a blog on&amp;nbsp;GitHub.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;&lt;strong&gt;If You&amp;#8217;ve Got a GitHub Account, You Can Have a&amp;nbsp;Blog!&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/"&gt;GitHub.com&lt;/a&gt; is a hugely popular source code control web service
that uses &lt;a href="https://git-scm.com"&gt;git&lt;/a&gt; to synchronize local files with copies kept on
GitHub&amp;#8217;s servers. This lets you easily share and back up your work.
For the purposes of this article I&amp;#8217;ll assume that you have a GitHub
account, are comfortable with basic git commands and want a blog to
call your own using&amp;nbsp;Pelican.&lt;/p&gt;
&lt;p&gt;In addition to it&amp;#8217;s repository user interface, GitHub also enables
users to &lt;a href="https://help.github.com/categories/GitHub-pages-basics/"&gt;publish web pages&lt;/a&gt; of their own directly from a
repository. The web site generation package that GitHub recommends is
&lt;a href="https://jekyllrb.com"&gt;Jekyll&lt;/a&gt;, written in Ruby. Since I&amp;#8217;m a bigger fan of &lt;a href="https://python.org"&gt;Python&lt;/a&gt;, I
went with &lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt;&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll describe how to install Pelican, set up your GitHub repository
and publish your first&amp;nbsp;article. &lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;The&amp;nbsp;Basics&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Pelican and Jekyll both transform content written in &lt;a href="https://guides.github.com/features/mastering-markdown"&gt;Markdown&lt;/a&gt; or
&lt;a href="http://docutils.sourceforge.net/docs/user/rst/quickref.html"&gt;ReStructured Text&lt;/a&gt; into &lt;span class="caps"&gt;HTML&lt;/span&gt; and generate a static web site. Both
generators support themes which allow for infinite amounts of
customization. We&amp;#8217;ll install pelican, run a quick start helper, write
some Markdown files and then publish our website to&amp;nbsp;GitHub.&lt;/p&gt;
&lt;p&gt;Easy&amp;nbsp;peasy.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Installing Pelican &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Creating the&amp;nbsp;Repo&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;First things first, you need pelican (and ghp-import) installed on
your local machine.  This is super easy with the pip, the python package
installation tool (you have pip&amp;nbsp;right?):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pelican ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, open up a browser and create a new repository on GitHub for your
new sweet blog. Name it as follows (use your GitHub user&amp;nbsp;name):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://GitHub.com/username/username.github.io
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and leave it empty, we will fill it up with compelling blog content in
a&amp;nbsp;second.&lt;/p&gt;
&lt;p&gt;Using a command-line (you command-line right?), clone your empty git
repository to your local&amp;nbsp;machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://GitHub.com/username/username.github.io blog
$ &lt;span class="nb"&gt;cd&lt;/span&gt; blog
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;strong&gt;That One Weird&amp;nbsp;Trick&amp;#8230;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now here&amp;#8217;s the trick with publishing web content on GitHub which isn&amp;#8217;t
super obvious. For user pages, pages hosted in repos named
&lt;em&gt;username.github.io&lt;/em&gt;, the content is served from the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;I strongly prefer to not keep all the pelican configuration files
and raw Markdown files in &lt;code&gt;master&lt;/code&gt;, just the web content. So I keep
the pelican configuration and the raw content in a seperate branch
that I like to call &amp;#8216;content&amp;#8217;. You can call it whatever you want, but
I&amp;#8217;ll just assume you called it content too. I like this organization
since I can completely throw away all the files in &lt;code&gt;master&lt;/code&gt; and
re-populate it with the &lt;code&gt;content&lt;/code&gt; branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout -b content
Switched to a new branch &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;strong&gt;Configuring&amp;nbsp;Pelican&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now, here comes the content configuration. Pelican provides a great
initialization tool called &amp;#8216;pelican-quickstart&amp;#8217; that will ask you a
series of questions about your&amp;nbsp;blog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican-quickstart
Welcome to pelican-quickstart v3.7.1.

This script will &lt;span class="nb"&gt;help&lt;/span&gt; you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.

&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;  
&amp;gt; What will be the title of this web site? Super blog
&amp;gt; Who will be the author of this web site? username
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to &lt;span class="nb"&gt;enable&lt;/span&gt; article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; What is your &lt;span class="nb"&gt;time&lt;/span&gt; zone? &lt;span class="o"&gt;[&lt;/span&gt;Europe/Paris&lt;span class="o"&gt;]&lt;/span&gt; US/Central
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
Done. Your new project is available at /Users/username/blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The only questions I didn&amp;#8217;t take the defaults on&amp;nbsp;were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;web site&amp;nbsp;title&lt;/li&gt;
&lt;li&gt;web site&amp;nbsp;author&lt;/li&gt;
&lt;li&gt;time&amp;nbsp;zone&lt;/li&gt;
&lt;li&gt;upload to&amp;nbsp;GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After answering all the questions, pelican leaves the following
offerings in the current&amp;nbsp;directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls
Makefile        content/    develop_server.sh*
fabfile.py      output/     pelicanconf.py
publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can go checkout the &lt;a href="https://docs.getpelican.com"&gt;Pelican docs&lt;/a&gt; to find out how to use
all of those files, but we&amp;#8217;re all about getting things down &lt;em&gt;right now&lt;/em&gt;.
No, I haven&amp;#8217;t read the docs yet&amp;nbsp;either.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Forging&amp;nbsp;On&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add .
$ git commit -m &lt;span class="s1"&gt;&amp;#39;initial pelican commit to content&amp;#39;&lt;/span&gt;
$ git push origin content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So here we&amp;#8217;ve added all the pelican generated files to the &lt;code&gt;content&lt;/code&gt;
branch of the local git repo, commited the changes and then pushed the
local changes to the remote repo hosted on GitHub. Not super exciting,
but it will be handy if we need to revert edits to one of these&amp;nbsp;files.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Finally Getting&amp;nbsp;Somewhere&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Ok, now we get bloggy! All of your blog posts, photos, images, pdfs,
etc will live in the &lt;code&gt;content&lt;/code&gt; directory which is initially
empty. I&amp;#8217;ll talk you thru creating a first post and an &amp;#8216;About&amp;#8217; page
with a&amp;nbsp;photo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; content
$ mkdir pages images
$ cp /Users/username/SecretStash/HotPhotoOfMe.jpg images
$ touch first-post.md
$ touch pages/about.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next open the empty file &lt;code&gt;first-post.md&lt;/code&gt; in your favorite editor
and add the following&amp;nbsp;text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;First&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;Sweet&lt;/span&gt; &lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;Blog&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="n"&gt;Here&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="n"&gt;On&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;Way&lt;/span&gt; &lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;Internet&lt;/span&gt; &lt;span class="n"&gt;Fame&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Fortune&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;While&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;informative&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
&lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;convey&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;sense&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;excitement&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;eagerness&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;engage&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first three lines are metadata that pelican uses to organize things. There
are lots of different metadata you can put there, again the docs are your best
bet for learning more about&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;Now we&amp;#8217;ll open up the empty file &lt;code&gt;pages/about.md&lt;/code&gt; and add this&amp;nbsp;text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;About&lt;/span&gt;
&lt;span class="nl"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;So&lt;/span&gt; &lt;span class="n"&gt;Schmexy&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;my_sweet_photo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;Hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;wrote&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;epic&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Interweb&lt;/span&gt;
&lt;span class="n"&gt;wisdom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;yore&lt;/span&gt; &lt;span class="n"&gt;much&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;deemed&lt;/span&gt; &lt;span class="n"&gt;sorcery&lt;/span&gt;
&lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;probably&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;burned&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;stake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="err"&gt;ð&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;my_sweet_photo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;HotPhotoOfMe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So now we have three new pieces of web content in our content
directory. Of the content branch. That&amp;#8217;s a lot of&amp;nbsp;content.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Publishing&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Don&amp;#8217;t worry, the pay off is&amp;nbsp;coming!&lt;/p&gt;
&lt;p&gt;All that&amp;#8217;s left to do&amp;nbsp;is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run pelican to generate the static &lt;span class="caps"&gt;HTML&lt;/span&gt; files in &lt;code&gt;output&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   $ pelican content -o output -s publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;ghp-import&lt;/code&gt; to add the contents of the output directory to the &lt;code&gt;master&lt;/code&gt; branch:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   $ ghp-import -m &lt;span class="s2"&gt;&amp;quot;Generate Pelican site&amp;quot;&lt;/span&gt; --no-jekyll -b master output
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Push the local master branch to the remote&amp;nbsp;repo:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   $ git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Commit and push the new content to the &amp;#8216;content&amp;#8217;&amp;nbsp;branch:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   $ git add content
   $ git commit -m &lt;span class="s1"&gt;&amp;#39;added a first post, a photo and an about page&amp;#39;&lt;/span&gt;
   $ git push origin content
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;strong&gt;&lt;span class="caps"&gt;OMG&lt;/span&gt; I Did&amp;nbsp;It!&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now the exciting part is here, when you get to see what you&amp;#8217;ve
published for everyone to see! Type into your browser the &lt;span class="caps"&gt;URL&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://username.github.io
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Congratulations on your new blog, self-published on&amp;nbsp;GitHub!&lt;/p&gt;</content><category term="python"></category><category term="blog"></category><category term="pelican"></category><category term="GitHub"></category></entry></feed>